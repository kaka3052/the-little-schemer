/*
第5章 我的天！都是星星
本章主题是:
    1.深度和广度的双维度递归。
        (null?)
        (cons 原子 列表)
        (cons 列表 列表)
    2.复杂函数代替简单函数。
        (语法糖/代理层)
*/

(define subst*
    (lambda (new old l)
        (cond
            ((null ? l) (quote()))
            (else
                (cond
                    ((atom? (car l)) 
                        (cond
                            ((eq? old (car l)) (cons new (subst* new old (cdr l) )))
                            (else (cons old (subst* new old (cdr l))))
                        )
                    )
                    (else (cons (subst* new old (car l)) (subst* new old (cdr l))))
                )
            )
        )

    )
)

(define insertL*
    (lambda (new old l)
        (cond 
            ( (null? l) (quote()))
            (else
                (cond
                    ((atom? (car l))
                        (cond
                            ((eq? old (car l)) (cons new (cons old (insertL* new old (cdr l)))))
                            (else (cons (car l) (insertL* new old (cdr l))))
                        )
                    )
                    (else (cons (insertL* new old (car l)) (insertL* new old (cdr l))))
                )
            )
        )
    )
)


// (member* a l)    p87
// 在这里 a 是chips l为((potato)(chips((www) fish)(chips)))   
// 结果：#t 
(define member*
    (lambda (a l)
        (cond
            ((null ? l) (quote()))
            ((atom? (car l))
                (or (eq? a (car l)) (member* a (cdr l)))
            )
            (else (or (member* a (car l)) (member* a (cdr l))))
        )
    )
)

// 2018-12-6 
//(leftmost l)
// (((hot)(tuna(and))))
// 结果是hot
(define leftmost
    (lambda (l)
        (cond 
            ((atom? (car l)) (car l)
            (else (leftmost (car l)))
        )
    )
)

//(eqlist? l1 l2)
//用eqan?来写eqlist?
(define eqlist?
    (lambda (l1 l2)
        (cond 
            (and (null? l1) (null? l2) #t)
            (or ((null? l1) (null? l2) #f)
            (and (atom? (car l1)) (atom? (car l2)) 
            //典型部分
                (cond
                    ((eqan? (car l1) (car l2)) (eqlist? (cdr l1)(cdr l2)))
                    (else #f)
                )
            )
            (or (atom? car l1) (atom? car l2) #f)
            (else 
                (and (eqlist? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2)))
            )
    )
)

/*
tips:
WHAT? 每个事件的可能性是以下情况之一：
    1.为空
    2.原子+列表
    3.列表+列表
抽象的本质：
    1.null表示无意义的事情
    2.原子表示当前事情可以下手做
    3.列表表示当前事情还可以拆分，还是复杂。
WHY？为什么这么拆？
    因为、是依赖第一个动作，第一个动作也就意味着当下的时刻or或者说今天。
    所以、第一个动作，即，典型部分。
    由于、典型部分是比自然部分更加重要，对于整体函数的定义来说。
    所以、当下比全部的未来还要重要，因为当下才是本质上定义着你的人生是什么样子的“算法”。
HOW？有什么指导意义？
    1.觉知当下时刻的事情，是三类分支中的哪类事情？
    2.如果是null，则尽量避免，甚至放弃。（无意义之事）
    3.如果是原子，则集中全部注意力，做好。（有意义，且可操作的事）
    4.如果是列表，则拆分。不要一上来就做。（有意义，且不易操作的事）
    5.总结、关键point是：识别出是原子还是列表，因为这俩容易混淆。（都是有意义的事）
SO，最终指导框架是什么？
    1.如果是原子，则一下是一下的做。
    2.如果是列表，则拆解为第一步（典型部分），和其余部分（自然部分）。
*/


//(equal? s1 s2)
// eqlist是比较俩个列表，equal是比较俩个S表达式，即，包括原子和列表
(define equal?
    (lambda (s1 s2)
        (cond
            (and (atom? s1) (atom? s2) (eqan? s1 s2))
            (or (atom? s1) (atom?s2) #f)
            (else (eqlist? s1 s2))
        )
    )
)

/*
tips: 确定性、define 未知＝一点点确定性＋未知 
用equal来重写eqlist
WHAT?equal里面有eqlist的代码，是否会成为用equal来重写eqlist的限制？
WHY?为什么会是限制呢？这个思维模式是什么？
    1.本能的认为不能用未知来定义未知。
    2.但是递归思维模式就是用未知来定义未知。
    3.当然定义中不能全部是未知，还会有一部分的确定性，即，典型部分。
    4.启发是：当下or今天，就是人生函数定义中的，确定性部分，也只有当下是唯一的确定性部分。其他都是未知。
    5.递归模式的本质是未知咬合确定部分，形成一个链条，指向未来。未知如何变成确定性，就是靠着一次又一次与确定性部分的咬合。（放生确定性的关系）。也就是与确定性发生关系，就会让未知成为确定性。
HOW？对我的指导意义是什么？
    1.当下是唯一确定性的典型部分。
    2.与确定性高的人发生关系，不要与不靠谱的人发生关系。因为确定性可以传染。即，和靠谱的人合作，你才是靠谱的人。
    3.只要包含一点点的确定性，未知定义未知这个逻辑就成立。即，未知＝一点点确定性＋未知
    4.so，用equal定义eqlist是ok的，因为equal中包含一点确定性，即，eqan。
*/

//(eqlist? l1 l2)   用equal来定义eqlist
(define eqlist?
    (lambda (l1 l2)
        (cond
            ((and (null? l1) (null? l2)) #t)
            ((or (null? l1) (null? l2)) #f)
            (else
                (and (equal? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2)))
            )
        )
    )
)



/*
tips: 
1.equal?可以代替eq?和= 但是不能代替eqan。
2.WHY？因为equal?定义中的典型部分是由eqan实现的。
3.所以，得出结论：典型部分不能被未知代替。即，一个未知的定义，不能全是未知。
4.由于eqan的典型部分是eq?和=。所以，equal没有真的代替eq?和＝。而是eq?和＝的新的冗余组织关系，代替了原来单薄的eq和=。
5.WHAT？本质是什么？ 本质是equal代表着eq和＝的新关系组织的系统。equal是eq和=的一个代理层，即，语法糖
*/

