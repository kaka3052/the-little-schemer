/*
第八章 lambda终结者


*/

//(rember-f test? a l)   在l中查找到第一个a，将其剔除。
(define rember-f
    (lambda (test? a l)
        (cond
            ((null? l) (quote()))
            //在Lisp中 test?写成 funcall test?, 用funcall test?表达的更到位，即，表示一个函数的运行
            ((test? a (car l)) (cdr l))
            (else (cons (car l) (rember-f test? a (cdr l )))))))

//如何让函数返回函数? 如果参数为a时候，返回的函数是
//(lambda (x)
//    (eq? x a))
//这就是传说的柯里化  Curry-ing
(lambda (a)
    (lambda (x)
        (eq? x a)))

//使用define...来给这个函数去一个名字

(define eq?-c
    (lambda(a)
        (lambda(x)
            (eq? x a))))

/*
(eq?-c k)表示什么？在这里k是salad

表示一个函数:
(lambda (x)
    eq? x salad)

我们来定义这个函数:
(define eq?-salad 
    (eq?-c k))    
等于是：
(define eq?-salad
    (lambda (x)
        eq? x salad))


如果不用eq?-salad如何写？
((eq?-c x) y)
*/

//重写rember-f使其只保留一个参数
(define rember-f
    (lambda (test?)
        (lambda (a l))
            (cond 
                ((null? l) (quote()))
                ((test? a (car l) ) (cdr l))
                (else (cons (car l) ((rember-f test?) a (cdr l)))))))


//对于insertL-f和insertR-f，如何合并成一个函数？
//将差异提取出来, 封装成一个辅助函数。
(define seqL
    (lambda (new old l)
        (cons new (cons old l))))   //new在old左边

(define seqR
    (lambda (new old l)
        (cons old (cons new l))))   //new在old右边

//定义一个函数的参数seq,可以是seqL也可以是seqR.这里有点接口的味道了。但是由于没有类型检查，所以容易出错。
//即，不符合这俩种逻辑的函数也能传入进来。
//所以，java或者go这种强类型的语言就是解决这个问题的。保证不是干这类事的别进来。
(define insert-g
    (lambda (seq)
        (lambda (new old l)
            (cond 
                ((null? l) (quote()))
                ((eq? (car l) old) 
                    (seq new old (cdr l)))
                (else ((insert-g seq) new old (cdr l))) ))))

//现在用insert-g来定义insertL
(define insertL
    (insert-g seqL))
//现在用insert-g来定义insertR
(define insertR
    (insert-g seqR))
//重写，不用辅助函数,直接将定义传递进去
(define insertL
    (insert-g
        (lambda (new old l)
            (cons new (cons old l)))))


//第九戒：用函数来抽象通用模式
//将重复的代码中的差异部分，的差异值作为函数的返回值。差异逻辑作为辅助函数的算法。

(define atom-to-function
    (lambda (x)
        (cond
            ((eq? x (quote +)) ＋)
            ((eq? x (quote *)) ＊)
            (else ^))))

(define value
    (lambda (nexp)
        (cond
            ((atom? nexp) nexp)
            (else
                ((atom-to-function
                    (operator nexp))
                (value (1st-sub-exp nexp))
                (value (2nd-sub-exp nexp)))))))

//根据之前的multirember编写multirember-f函数
(define multirember
    (lambda (a lat)
        (cond 
            ((null? lat) (qutoe ()))
            (( eq? a (car lat)) (multirember (car lat)))
            (else (cons (car lat) (multirember (cdr lat)))))))
//需要抽象出来的部分为判断第一个字母是否相等，如果相等则返回()如果不等则返回car lat

(define multirember-f 
    (lambda (a lat))
        (cond 
            ((null? lat) (quote ()))
            (else cons (judgefirstchar a lat) (multirember (cdr lat)))))

(define judgefirstchar
    (lambda (a lat)
        (cond 
            ((eq? a (car lat)) (qutoe ()))
            (else (car lat)))))


//反思，书里说的不是要搞抽象差异代码，而是要搞currying,那么如下：
(define multirember-f
    (lambda (test?)
        (lambda(a lat)
            (cond
                ((null? lat) (qutoe ()))
                ((test? a (car lat)) ((mutirember-f test?) a (cdr lat)))
                (else ((mutirember-f test?) a (cdr lat))))))) 


//collector or continuation

(define multirember&co
    (lambda (a lat col)
        (cond
            ((null? lat)
                (col (quote())(quote()))
            ((eq? (car lat) a)
                (multirember&co a
                    (cdr lat)
                    (lambda (newlat seen)
                        (col newlat (cons (car lat) seen)))))
            (else
                (multirember&co a
                    (cdr lat)
                    (lambda (newlat seen)
                        (col (cons (car lat) newlat) seen))))))))

//最终的运行时 (col  list1  list2)
//其中list1为所有等于a的原子. list2为所有不等于a的原子.
//what？本质上是利用currying，将参数连成了一个数组。最后执行一次，即前期造势，最后爆发。

//为了更深刻的理解continuation，写一个题目：用递归实现反向输出一个列表
//这里有两种思路：
//思路1.正常的递归方式，利用递归实现最后的表达式线性变化。
//思路2:使用构建currying函数嵌套结构，将参数作为collector，最后执行一个currying表达式
//WHAT?本质不同是,递归变性的方式，第一种是变形成线性表达式，第二种是变形称为curry表达式。
//前者运行的时候是现行表达式，后者运行的时候是curry表达式。
//curry表达式的本质是函数的嵌套，并且可以跨函数将参数变成collector

//思路1:
(define rever
    (lambda (lat)
        (cond 
            ((null? lat) (print "BEGIN"))
            (else
                (rever (cdr lat)) (print (car lat))(print "END")))))

逐步执行:
1(调用）:  (rever (a b))
2(变形):  (rever (b)) (print a) (print "END")
3(变形):  ((rever ()) (print b)) (print a) (print "END")
4(输出):  ((print "BEGIN") (print b))(print a)(print "END") ---运行--->  BEGIN b a END


//思路2:
(define rever
    (lambda (lat col)
        (cond 
            ((null? lat) (col "BEGIN"))
            (else
                (rever (cdr lat) 
                    (lambda (list)
                        (col (cons list (car lat)))))))))
(define col
    (lambda (list)
        (print  (cons list "END"))))


逐步执行：
1(调用):  (rever (a b) (lambda (list)
                            (print list + "END")))

2(变形):  (rever (b) (lambda (list)
                        (lambda (list + a))
                            (print list + a + "END"))))

3(变形):  (rever ()  (lambda (list)
                        (lambda (list + b))
                            (lambda (list + b + a))
                                (print list + b + a + "END")))

4(执行输出):  (col "BEGIN")--> (lambda ("BEGIN")
                                (lambda ("BEGIN" + b))
                                    (lambda ("BEGIN" + b + a))
                                        (print "BEGIN" + b + a + "END"))  
    ----运行--输出--> BEGIN b a END




























